// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique @db.VarChar(50)
  password   String   @db.VarChar(50)
  nickname   String   @db.VarChar(50)
  email      String   @db.VarChar(50)
  headePic   String   @default("") @db.VarChar(100)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  friends        FriendShip[] @relation("userToFriend")
  inverseFriends FriendShip[] @relation("friendToUser")
}

model FriendShip {
  uid  Int
  user User @relation("userToFriend", fields: [uid], references: [id])

  friendId Int
  friend   User @relation("friendToUser", fields: [friendId], references: [id])

  @@id([uid, friendId])
}

model Friend_Request {
  id         Int      @id @default(autoincrement())
  fromUid    Int
  toUid      Int
  // 添加理由
  reason     String   @db.VarChar(100)
  // 状态 0 请求中 1 已同意 2 已拒绝
  status     Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Chatroom {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  // 聊天室类型 true 群聊 false 单聊
  type       Boolean  @default(false)
  createTime DateTime @default(now())
  UpdateTime DateTime @updatedAt
}

model UserChatroom {
  uid        Int
  chatroomId Int

  @@id([uid, chatroomId])
}

model ChatHistory {
  id         Int      @id @default(autoincrement())
  content    String   @db.VarChar(500)
  type       Int // text 0  image 1 file 2
  chatroomId Int
  uid        Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}
